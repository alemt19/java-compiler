
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVABSTRACT AND ASSERT BITAND BITNOT BITOR BITXOR BOOLEAN BOOLEAN_LITERAL BOOLEAN_TYPE BREAK BYTE_TYPE CASE CATCH CHAR CHARACTER_LITERAL CHAR_TYPE CLASS COLON COMMA CONST CONTINUE DEC DEFAULT DIV DIVEQUALS DO DOT DOUBLE_TYPE ELSE ENUM EQ EQUALS EXTENDS FALSE FINAL FINALLY FLOAT FLOAT_TYPE FOR GOTO GT GTE IDENTIFIER IF IMPLEMENTS IMPORT INC INSTANCEOF INT INTERFACE INT_TYPE LBRACE LBRACKET LONG_TYPE LPAREN LSHIFT LT LTE MINUS MINUSEQUALS MOD MODEQUALS MULT MULTEQUALS NATIVE NEQ NEW NOT NULL NULL_LITERAL NUMBER OR PACKAGE PLUS PLUSEQUALS PRIVATE PROTECTED PUBLIC RBRACE RBRACKET RETURN RPAREN RSHIFT SEMICOLON SHORT_TYPE STATIC STRICTFP STRING STRING_LITERAL STRING_TYPE SUPER SWITCH SYNCHRONIZED THIS THROW THROWS TRANSIENT TRUE TRY URSHIFT VOID VOLATILE WHILE XORprogram : lista_declaracioneslista_declaraciones : lista_declaraciones declaracion\n                           | declaraciondeclaracion : declaracion_variable\n                   | declaracion_funciontipo : INT_TYPE\n            | FLOAT\n            | BOOLEAN\n            | CHAR\n            | STRINGdeclaracion_variable : tipo IDENTIFIER SEMICOLONdeclaracion_funcion : tipo IDENTIFIER LPAREN lista_parametros RPAREN bloquelista_parametros : lista_parametros COMMA tipo IDENTIFIER\n                       | tipo IDENTIFIER\n                       |bloque : LBRACE lista_sentencias RBRACElista_sentencias : lista_sentencias sentencia\n                        | sentencia\n                        |expresion : expresion PLUS expresion\n                 | expresion MINUS expresion\n                 | expresion MULT expresion\n                 | expresion DIV expresionexpresion : expresion AND expresion\n                 | expresion OR expresionsentencia : IDENTIFIER EQUALS expresion SEMICOLONsentencia : IF LPAREN expresion RPAREN bloque\n                 | IF LPAREN expresion RPAREN bloque ELSE bloquesentencia : FOR LPAREN tipo IDENTIFIER EQUALS expresion SEMICOLON expresion SEMICOLON expresion RPAREN bloquesentencia : WHILE LPAREN expresion RPAREN bloqueexpresion : IDENTIFIERexpresion : NUMBER\n                 | STRING_LITERAL\n                 | CHARACTER_LITERAL\n                 | BOOLEAN_LITERAL\n                 | NULL_LITERAL'
    
_lr_action_items = {'INT_TYPE':([0,2,3,4,5,12,14,15,20,21,31,35,],[7,7,-3,-4,-5,-2,-11,7,7,-12,-16,7,]),'FLOAT':([0,2,3,4,5,12,14,15,20,21,31,35,],[8,8,-3,-4,-5,-2,-11,8,8,-12,-16,8,]),'BOOLEAN':([0,2,3,4,5,12,14,15,20,21,31,35,],[9,9,-3,-4,-5,-2,-11,9,9,-12,-16,9,]),'CHAR':([0,2,3,4,5,12,14,15,20,21,31,35,],[10,10,-3,-4,-5,-2,-11,10,10,-12,-16,10,]),'STRING':([0,2,3,4,5,12,14,15,20,21,31,35,],[11,11,-3,-4,-5,-2,-11,11,11,-12,-16,11,]),'$end':([1,2,3,4,5,12,14,21,31,],[0,-1,-3,-4,-5,-2,-11,-12,-16,]),'IDENTIFIER':([6,7,8,9,10,11,16,22,23,24,25,31,32,33,34,36,45,47,48,49,50,51,52,53,63,64,65,68,69,71,74,],[13,-6,-7,-8,-9,-10,18,26,30,26,-18,-16,-17,37,37,37,55,-26,37,37,37,37,37,37,-27,37,-30,-28,37,37,-29,]),'SEMICOLON':([13,37,38,39,40,41,42,43,57,58,59,60,61,62,67,70,],[14,-31,47,-32,-33,-34,-35,-36,-20,-21,-22,-23,-24,-25,69,71,]),'LPAREN':([13,27,28,29,],[15,34,35,36,]),'RPAREN':([15,17,18,30,37,39,40,41,42,43,44,46,57,58,59,60,61,62,72,],[-15,19,-14,-13,-31,-32,-33,-34,-35,-36,54,56,-20,-21,-22,-23,-24,-25,73,]),'COMMA':([15,17,18,30,],[-15,20,-14,-13,]),'LBRACE':([19,54,56,66,73,],[22,22,22,22,22,]),'RBRACE':([22,24,25,31,32,47,63,65,68,74,],[-19,31,-18,-16,-17,-26,-27,-30,-28,-29,]),'IF':([22,24,25,31,32,47,63,65,68,74,],[27,27,-18,-16,-17,-26,-27,-30,-28,-29,]),'FOR':([22,24,25,31,32,47,63,65,68,74,],[28,28,-18,-16,-17,-26,-27,-30,-28,-29,]),'WHILE':([22,24,25,31,32,47,63,65,68,74,],[29,29,-18,-16,-17,-26,-27,-30,-28,-29,]),'EQUALS':([26,55,],[33,64,]),'ELSE':([31,63,],[-16,66,]),'NUMBER':([33,34,36,48,49,50,51,52,53,64,69,71,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'STRING_LITERAL':([33,34,36,48,49,50,51,52,53,64,69,71,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'CHARACTER_LITERAL':([33,34,36,48,49,50,51,52,53,64,69,71,],[41,41,41,41,41,41,41,41,41,41,41,41,]),'BOOLEAN_LITERAL':([33,34,36,48,49,50,51,52,53,64,69,71,],[42,42,42,42,42,42,42,42,42,42,42,42,]),'NULL_LITERAL':([33,34,36,48,49,50,51,52,53,64,69,71,],[43,43,43,43,43,43,43,43,43,43,43,43,]),'PLUS':([37,38,39,40,41,42,43,44,46,57,58,59,60,61,62,67,70,72,],[-31,48,-32,-33,-34,-35,-36,48,48,-20,-21,-22,-23,48,48,48,48,48,]),'MINUS':([37,38,39,40,41,42,43,44,46,57,58,59,60,61,62,67,70,72,],[-31,49,-32,-33,-34,-35,-36,49,49,-20,-21,-22,-23,49,49,49,49,49,]),'MULT':([37,38,39,40,41,42,43,44,46,57,58,59,60,61,62,67,70,72,],[-31,50,-32,-33,-34,-35,-36,50,50,50,50,-22,-23,50,50,50,50,50,]),'DIV':([37,38,39,40,41,42,43,44,46,57,58,59,60,61,62,67,70,72,],[-31,51,-32,-33,-34,-35,-36,51,51,51,51,-22,-23,51,51,51,51,51,]),'AND':([37,38,39,40,41,42,43,44,46,57,58,59,60,61,62,67,70,72,],[-31,52,-32,-33,-34,-35,-36,52,52,-20,-21,-22,-23,52,52,52,52,52,]),'OR':([37,38,39,40,41,42,43,44,46,57,58,59,60,61,62,67,70,72,],[-31,53,-32,-33,-34,-35,-36,53,53,-20,-21,-22,-23,53,53,53,53,53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'lista_declaraciones':([0,],[2,]),'declaracion':([0,2,],[3,12,]),'declaracion_variable':([0,2,],[4,4,]),'declaracion_funcion':([0,2,],[5,5,]),'tipo':([0,2,15,20,35,],[6,6,16,23,45,]),'lista_parametros':([15,],[17,]),'bloque':([19,54,56,66,73,],[21,63,65,68,74,]),'lista_sentencias':([22,],[24,]),'sentencia':([22,24,],[25,32,]),'expresion':([33,34,36,48,49,50,51,52,53,64,69,71,],[38,44,46,57,58,59,60,61,62,67,70,72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> lista_declaraciones','program',1,'p_program','parser.py',195),
  ('lista_declaraciones -> lista_declaraciones declaracion','lista_declaraciones',2,'p_lista_declaraciones','parser.py',199),
  ('lista_declaraciones -> declaracion','lista_declaraciones',1,'p_lista_declaraciones','parser.py',200),
  ('declaracion -> declaracion_variable','declaracion',1,'p_declaracion','parser.py',207),
  ('declaracion -> declaracion_funcion','declaracion',1,'p_declaracion','parser.py',208),
  ('tipo -> INT_TYPE','tipo',1,'p_tipo','parser.py',212),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',213),
  ('tipo -> BOOLEAN','tipo',1,'p_tipo','parser.py',214),
  ('tipo -> CHAR','tipo',1,'p_tipo','parser.py',215),
  ('tipo -> STRING','tipo',1,'p_tipo','parser.py',216),
  ('declaracion_variable -> tipo IDENTIFIER SEMICOLON','declaracion_variable',3,'p_declaracion_variable','parser.py',220),
  ('declaracion_funcion -> tipo IDENTIFIER LPAREN lista_parametros RPAREN bloque','declaracion_funcion',6,'p_declaracion_funcion','parser.py',225),
  ('lista_parametros -> lista_parametros COMMA tipo IDENTIFIER','lista_parametros',4,'p_lista_parametros','parser.py',232),
  ('lista_parametros -> tipo IDENTIFIER','lista_parametros',2,'p_lista_parametros','parser.py',233),
  ('lista_parametros -> <empty>','lista_parametros',0,'p_lista_parametros','parser.py',234),
  ('bloque -> LBRACE lista_sentencias RBRACE','bloque',3,'p_bloque','parser.py',243),
  ('lista_sentencias -> lista_sentencias sentencia','lista_sentencias',2,'p_lista_sentencias','parser.py',247),
  ('lista_sentencias -> sentencia','lista_sentencias',1,'p_lista_sentencias','parser.py',248),
  ('lista_sentencias -> <empty>','lista_sentencias',0,'p_lista_sentencias','parser.py',249),
  ('expresion -> expresion PLUS expresion','expresion',3,'p_expresion_aritmetica','parser.py',258),
  ('expresion -> expresion MINUS expresion','expresion',3,'p_expresion_aritmetica','parser.py',259),
  ('expresion -> expresion MULT expresion','expresion',3,'p_expresion_aritmetica','parser.py',260),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_aritmetica','parser.py',261),
  ('expresion -> expresion AND expresion','expresion',3,'p_expresion_logica','parser.py',265),
  ('expresion -> expresion OR expresion','expresion',3,'p_expresion_logica','parser.py',266),
  ('sentencia -> IDENTIFIER EQUALS expresion SEMICOLON','sentencia',4,'p_asignacion','parser.py',270),
  ('sentencia -> IF LPAREN expresion RPAREN bloque','sentencia',5,'p_sentencia_if','parser.py',275),
  ('sentencia -> IF LPAREN expresion RPAREN bloque ELSE bloque','sentencia',7,'p_sentencia_if','parser.py',276),
  ('sentencia -> FOR LPAREN tipo IDENTIFIER EQUALS expresion SEMICOLON expresion SEMICOLON expresion RPAREN bloque','sentencia',12,'p_sentencia_for','parser.py',283),
  ('sentencia -> WHILE LPAREN expresion RPAREN bloque','sentencia',5,'p_sentencia_while','parser.py',290),
  ('expresion -> IDENTIFIER','expresion',1,'p_expresion_identificador','parser.py',294),
  ('expresion -> NUMBER','expresion',1,'p_expresion_literal','parser.py',298),
  ('expresion -> STRING_LITERAL','expresion',1,'p_expresion_literal','parser.py',299),
  ('expresion -> CHARACTER_LITERAL','expresion',1,'p_expresion_literal','parser.py',300),
  ('expresion -> BOOLEAN_LITERAL','expresion',1,'p_expresion_literal','parser.py',301),
  ('expresion -> NULL_LITERAL','expresion',1,'p_expresion_literal','parser.py',302),
]
