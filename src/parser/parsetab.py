
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMAleftORleftANDleftEQNEQleftLTLTEGTGTEleftPLUSMINUSleftMULTDIVMODrightELSEAND BITAND BITNOT BITOR BITXOR BOOLEAN BOOLEAN_LITERAL BOOLEAN_LITERAL CHAR CHARACTER_LITERAL CLASS COLON COMMA DEC DIV DIVEQUALS DOT ELSE EQ EQUALS FLOAT FOR GT GTE IDENTIFIER IF INC INT_TYPE LBRACE LBRACKET LPAREN LSHIFT LT LTE MINUS MINUSEQUALS MOD MODEQUALS MULT MULTEQUALS NEQ NOT NULL_LITERAL NUMBER OR PLUS PLUSEQUALS PRIVATE PROTECTED PUBLIC RBRACE RBRACKET RPAREN RSHIFT SEMICOLON STATIC STRING STRING_LITERAL URSHIFT VOID WHILE XORprogram : lista_declaracioneslista_declaraciones : declaracion lista_declaraciones\n                           | declaraciondeclaracion : declaracion_variable\n                   | declaracion_funcion\n                   | declaracion_clasedeclaracion_clase : CLASS IDENTIFIER LBRACE lista_miembros RBRACE\n                         | modificador CLASS IDENTIFIER LBRACE lista_miembros RBRACElista_miembros : lista_miembros miembro\n                      | miembro\n                      |miembro : declaracion_variable\n               | declaracion_funciontipo : simple_type\n            | simple_type LBRACKET RBRACKETsimple_type : INT_TYPE\n                   | FLOAT\n                   | BOOLEAN\n                   | CHAR\n                   | STRING\n                   | IDENTIFIERtipo_funcion : INT_TYPE\n                    | FLOAT\n                    | BOOLEAN\n                    | CHAR\n                    | STRING\n                    | VOIDdeclaracion_variable : tipo IDENTIFIER EQUALS expresion SEMICOLON\n                            | tipo IDENTIFIER SEMICOLONdeclaracion_funcion : lista_modificadores tipo_funcion IDENTIFIER LPAREN lista_parametros RPAREN bloquelista_modificadores : lista_modificadores modificador\n                           | modificadormodificador : PUBLIC\n                   | PRIVATE\n                   | PROTECTED\n                   | STATIClista_parametros : parametro\n                       | lista_parametros COMMA parametro\n                       |parametro : tipo IDENTIFIERbloque : LBRACE lista_sentencias RBRACElista_sentencias : sentencia lista_sentencias\n                        | sentencia\n                        |expresion : expresion_aritmetica\n                 | expresion_logica\n                 | expresion_identificador\n                 | expresion_literal\n                 | expresion_comparacionexpresion_aritmetica : expresion PLUS expresion\n                            | expresion MINUS expresion\n                            | expresion MULT expresion\n                            | expresion DIV expresionexpresion_logica : expresion AND expresion\n                        | expresion OR expresionexpresion_identificador : IDENTIFIERexpresion_literal : NUMBER\n                         | STRING_LITERAL\n                         | CHARACTER_LITERAL\n                         | BOOLEAN_LITERAL\n                         | NULL_LITERALexpresion_comparacion : expresion LT expresion\n                             | expresion LTE expresion\n                             | expresion GT expresion\n                             | expresion GTE expresion\n                             | expresion EQ expresion\n                             | expresion NEQ expresionsentencia : declaracion_variablesentencia : IDENTIFIER EQUALS expresion SEMICOLONsentencia : IF LPAREN expresion RPAREN bloque\n                 | IF LPAREN expresion RPAREN bloque ELSE bloquesentencia : FOR LPAREN tipo IDENTIFIER EQUALS expresion SEMICOLON expresion SEMICOLON expresion RPAREN bloquesentencia : WHILE LPAREN expresion RPAREN bloque'
    
_lr_action_items = {'CLASS':([0,3,4,5,6,11,13,14,15,16,36,60,76,94,95,105,],[10,10,-4,-5,-6,33,-33,-34,-35,-36,-29,-28,-7,-8,-30,-41,]),'PUBLIC':([0,3,4,5,6,9,11,13,14,15,16,25,36,38,54,55,56,57,58,59,60,76,77,78,94,95,105,],[13,13,-4,-5,-6,13,-32,-33,-34,-35,-36,-31,-29,13,13,-10,-12,-13,-32,13,-28,-7,-9,13,-8,-30,-41,]),'PRIVATE':([0,3,4,5,6,9,11,13,14,15,16,25,36,38,54,55,56,57,58,59,60,76,77,78,94,95,105,],[14,14,-4,-5,-6,14,-32,-33,-34,-35,-36,-31,-29,14,14,-10,-12,-13,-32,14,-28,-7,-9,14,-8,-30,-41,]),'PROTECTED':([0,3,4,5,6,9,11,13,14,15,16,25,36,38,54,55,56,57,58,59,60,76,77,78,94,95,105,],[15,15,-4,-5,-6,15,-32,-33,-34,-35,-36,-31,-29,15,15,-10,-12,-13,-32,15,-28,-7,-9,15,-8,-30,-41,]),'STATIC':([0,3,4,5,6,9,11,13,14,15,16,25,36,38,54,55,56,57,58,59,60,76,77,78,94,95,105,],[16,16,-4,-5,-6,16,-32,-33,-34,-35,-36,-31,-29,16,16,-10,-12,-13,-32,16,-28,-7,-9,16,-8,-30,-41,]),'INT_TYPE':([0,3,4,5,6,9,11,13,14,15,16,25,36,38,53,54,55,56,57,58,59,60,76,77,78,92,94,95,96,99,100,105,109,115,119,121,124,130,],[17,17,-4,-5,-6,26,-32,-33,-34,-35,-36,-31,-29,17,17,17,-10,-12,-13,-32,17,-28,-7,-9,17,17,-8,-30,17,17,-68,-41,17,-69,-70,-73,-71,-72,]),'FLOAT':([0,3,4,5,6,9,11,13,14,15,16,25,36,38,53,54,55,56,57,58,59,60,76,77,78,92,94,95,96,99,100,105,109,115,119,121,124,130,],[18,18,-4,-5,-6,27,-32,-33,-34,-35,-36,-31,-29,18,18,18,-10,-12,-13,-32,18,-28,-7,-9,18,18,-8,-30,18,18,-68,-41,18,-69,-70,-73,-71,-72,]),'BOOLEAN':([0,3,4,5,6,9,11,13,14,15,16,25,36,38,53,54,55,56,57,58,59,60,76,77,78,92,94,95,96,99,100,105,109,115,119,121,124,130,],[19,19,-4,-5,-6,28,-32,-33,-34,-35,-36,-31,-29,19,19,19,-10,-12,-13,-32,19,-28,-7,-9,19,19,-8,-30,19,19,-68,-41,19,-69,-70,-73,-71,-72,]),'CHAR':([0,3,4,5,6,9,11,13,14,15,16,25,36,38,53,54,55,56,57,58,59,60,76,77,78,92,94,95,96,99,100,105,109,115,119,121,124,130,],[20,20,-4,-5,-6,29,-32,-33,-34,-35,-36,-31,-29,20,20,20,-10,-12,-13,-32,20,-28,-7,-9,20,20,-8,-30,20,20,-68,-41,20,-69,-70,-73,-71,-72,]),'STRING':([0,3,4,5,6,9,11,13,14,15,16,25,36,38,53,54,55,56,57,58,59,60,76,77,78,92,94,95,96,99,100,105,109,115,119,121,124,130,],[21,21,-4,-5,-6,30,-32,-33,-34,-35,-36,-31,-29,21,21,21,-10,-12,-13,-32,21,-28,-7,-9,21,21,-8,-30,21,21,-68,-41,21,-69,-70,-73,-71,-72,]),'IDENTIFIER':([0,3,4,5,6,7,8,10,12,17,18,19,20,21,24,26,27,28,29,30,31,33,35,36,38,40,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,78,92,94,95,96,99,100,101,105,107,108,109,110,113,115,119,120,121,124,125,127,130,],[8,8,-4,-5,-6,23,-21,32,-14,-16,-17,-18,-19,-20,37,-22,-23,-24,-25,-26,-27,39,41,-29,8,-15,8,8,-10,-12,-13,8,-28,41,41,41,41,41,41,41,41,41,41,41,41,93,-7,-9,8,8,-8,-30,101,101,-68,-21,-41,41,41,8,41,117,-69,-70,41,-73,-71,41,41,-72,]),'$end':([1,2,3,4,5,6,22,36,60,76,94,95,105,],[0,-1,-3,-4,-5,-6,-2,-29,-28,-7,-8,-30,-41,]),'LBRACKET':([8,12,17,18,19,20,21,101,],[-21,34,-16,-17,-18,-19,-20,-21,]),'VOID':([9,11,13,14,15,16,25,58,],[31,-32,-33,-34,-35,-36,-31,-32,]),'EQUALS':([23,101,117,],[35,107,120,]),'SEMICOLON':([23,41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,123,126,],[36,-56,60,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,-54,-55,-62,-63,-64,-65,-66,-67,115,125,127,]),'LBRACE':([32,39,91,116,118,122,129,],[38,59,96,96,96,96,96,]),'RBRACKET':([34,],[40,]),'NUMBER':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'STRING_LITERAL':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'CHARACTER_LITERAL':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'BOOLEAN_LITERAL':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'NULL_LITERAL':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'RBRACE':([36,38,54,55,56,57,59,60,77,78,95,96,98,99,100,105,106,115,119,121,124,130,],[-29,-11,76,-10,-12,-13,-11,-28,-9,94,-30,-44,105,-43,-68,-41,-42,-69,-70,-73,-71,-72,]),'IF':([36,60,96,99,100,105,115,119,121,124,130,],[-29,-28,102,102,-68,-41,-69,-70,-73,-71,-72,]),'FOR':([36,60,96,99,100,105,115,119,121,124,130,],[-29,-28,103,103,-68,-41,-69,-70,-73,-71,-72,]),'WHILE':([36,60,96,99,100,105,115,119,121,124,130,],[-29,-28,104,104,-68,-41,-69,-70,-73,-71,-72,]),'LPAREN':([37,102,103,104,],[53,108,109,110,]),'PLUS':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,61,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'MINUS':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,62,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'MULT':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,63,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,63,63,-52,-53,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'DIV':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,64,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,64,64,-52,-53,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'AND':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,65,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,-54,65,-62,-63,-64,-65,-66,-67,65,65,65,65,65,65,]),'OR':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,66,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,-54,-55,-62,-63,-64,-65,-66,-67,66,66,66,66,66,66,]),'LT':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,67,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,67,67,-62,-63,-64,-65,67,67,67,67,67,67,67,67,]),'LTE':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,68,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,68,68,-62,-63,-64,-65,68,68,68,68,68,68,68,68,]),'GT':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,69,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,69,69,-62,-63,-64,-65,69,69,69,69,69,69,69,69,]),'GTE':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,70,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,70,70,-62,-63,-64,-65,70,70,70,70,70,70,70,70,]),'EQ':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,71,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,71,71,-62,-63,-64,-65,-66,-67,71,71,71,71,71,71,]),'NEQ':([41,42,43,44,45,46,47,48,49,50,51,52,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,],[-56,72,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-50,-51,-52,-53,72,72,-62,-63,-64,-65,-66,-67,72,72,72,72,72,72,]),'RPAREN':([41,43,44,45,46,47,48,49,50,51,52,53,73,74,79,80,81,82,83,84,85,86,87,88,89,90,93,97,112,114,128,],[-56,-45,-46,-47,-48,-49,-57,-58,-59,-60,-61,-39,91,-37,-50,-51,-52,-53,-54,-55,-62,-63,-64,-65,-66,-67,-40,-38,116,118,129,]),'COMMA':([53,73,74,93,97,],[-39,92,-37,-40,-38,]),'ELSE':([105,119,],[-41,122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'lista_declaraciones':([0,3,],[2,22,]),'declaracion':([0,3,],[3,3,]),'declaracion_variable':([0,3,38,54,59,78,96,99,],[4,4,56,56,56,56,100,100,]),'declaracion_funcion':([0,3,38,54,59,78,],[5,5,57,57,57,57,]),'declaracion_clase':([0,3,],[6,6,]),'tipo':([0,3,38,53,54,59,78,92,96,99,109,],[7,7,7,75,7,7,7,75,7,7,113,]),'lista_modificadores':([0,3,38,54,59,78,],[9,9,9,9,9,9,]),'modificador':([0,3,9,38,54,59,78,],[11,11,25,58,58,58,58,]),'simple_type':([0,3,38,53,54,59,78,92,96,99,109,],[12,12,12,12,12,12,12,12,12,12,12,]),'tipo_funcion':([9,],[24,]),'expresion':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[42,79,80,81,82,83,84,85,86,87,88,89,90,111,112,114,123,126,128,]),'expresion_aritmetica':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'expresion_logica':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'expresion_identificador':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'expresion_literal':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'expresion_comparacion':([35,61,62,63,64,65,66,67,68,69,70,71,72,107,108,110,120,125,127,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'lista_miembros':([38,59,],[54,78,]),'miembro':([38,54,59,78,],[55,77,55,77,]),'lista_parametros':([53,],[73,]),'parametro':([53,92,],[74,97,]),'bloque':([91,116,118,122,129,],[95,119,121,124,130,]),'lista_sentencias':([96,99,],[98,106,]),'sentencia':([96,99,],[99,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> lista_declaraciones','program',1,'p_program','rules.py',16),
  ('lista_declaraciones -> declaracion lista_declaraciones','lista_declaraciones',2,'p_lista_declaraciones','rules.py',20),
  ('lista_declaraciones -> declaracion','lista_declaraciones',1,'p_lista_declaraciones','rules.py',21),
  ('declaracion -> declaracion_variable','declaracion',1,'p_declaracion','rules.py',29),
  ('declaracion -> declaracion_funcion','declaracion',1,'p_declaracion','rules.py',30),
  ('declaracion -> declaracion_clase','declaracion',1,'p_declaracion','rules.py',31),
  ('declaracion_clase -> CLASS IDENTIFIER LBRACE lista_miembros RBRACE','declaracion_clase',5,'p_declaracion_clase','rules.py',36),
  ('declaracion_clase -> modificador CLASS IDENTIFIER LBRACE lista_miembros RBRACE','declaracion_clase',6,'p_declaracion_clase','rules.py',37),
  ('lista_miembros -> lista_miembros miembro','lista_miembros',2,'p_lista_miembros','rules.py',46),
  ('lista_miembros -> miembro','lista_miembros',1,'p_lista_miembros','rules.py',47),
  ('lista_miembros -> <empty>','lista_miembros',0,'p_lista_miembros','rules.py',48),
  ('miembro -> declaracion_variable','miembro',1,'p_miembro','rules.py',58),
  ('miembro -> declaracion_funcion','miembro',1,'p_miembro','rules.py',59),
  ('tipo -> simple_type','tipo',1,'p_tipo','rules.py',64),
  ('tipo -> simple_type LBRACKET RBRACKET','tipo',3,'p_tipo','rules.py',65),
  ('simple_type -> INT_TYPE','simple_type',1,'p_simple_type','rules.py',73),
  ('simple_type -> FLOAT','simple_type',1,'p_simple_type','rules.py',74),
  ('simple_type -> BOOLEAN','simple_type',1,'p_simple_type','rules.py',75),
  ('simple_type -> CHAR','simple_type',1,'p_simple_type','rules.py',76),
  ('simple_type -> STRING','simple_type',1,'p_simple_type','rules.py',77),
  ('simple_type -> IDENTIFIER','simple_type',1,'p_simple_type','rules.py',78),
  ('tipo_funcion -> INT_TYPE','tipo_funcion',1,'p_tipo_funcion','rules.py',82),
  ('tipo_funcion -> FLOAT','tipo_funcion',1,'p_tipo_funcion','rules.py',83),
  ('tipo_funcion -> BOOLEAN','tipo_funcion',1,'p_tipo_funcion','rules.py',84),
  ('tipo_funcion -> CHAR','tipo_funcion',1,'p_tipo_funcion','rules.py',85),
  ('tipo_funcion -> STRING','tipo_funcion',1,'p_tipo_funcion','rules.py',86),
  ('tipo_funcion -> VOID','tipo_funcion',1,'p_tipo_funcion','rules.py',87),
  ('declaracion_variable -> tipo IDENTIFIER EQUALS expresion SEMICOLON','declaracion_variable',5,'p_declaracion_variable','rules.py',95),
  ('declaracion_variable -> tipo IDENTIFIER SEMICOLON','declaracion_variable',3,'p_declaracion_variable','rules.py',96),
  ('declaracion_funcion -> lista_modificadores tipo_funcion IDENTIFIER LPAREN lista_parametros RPAREN bloque','declaracion_funcion',7,'p_declaracion_funcion','rules.py',107),
  ('lista_modificadores -> lista_modificadores modificador','lista_modificadores',2,'p_lista_modificadores','rules.py',113),
  ('lista_modificadores -> modificador','lista_modificadores',1,'p_lista_modificadores','rules.py',114),
  ('modificador -> PUBLIC','modificador',1,'p_modificador','rules.py',122),
  ('modificador -> PRIVATE','modificador',1,'p_modificador','rules.py',123),
  ('modificador -> PROTECTED','modificador',1,'p_modificador','rules.py',124),
  ('modificador -> STATIC','modificador',1,'p_modificador','rules.py',125),
  ('lista_parametros -> parametro','lista_parametros',1,'p_lista_parametros','rules.py',130),
  ('lista_parametros -> lista_parametros COMMA parametro','lista_parametros',3,'p_lista_parametros','rules.py',131),
  ('lista_parametros -> <empty>','lista_parametros',0,'p_lista_parametros','rules.py',132),
  ('parametro -> tipo IDENTIFIER','parametro',2,'p_parametro','rules.py',141),
  ('bloque -> LBRACE lista_sentencias RBRACE','bloque',3,'p_bloque','rules.py',146),
  ('lista_sentencias -> sentencia lista_sentencias','lista_sentencias',2,'p_lista_sentencias','rules.py',151),
  ('lista_sentencias -> sentencia','lista_sentencias',1,'p_lista_sentencias','rules.py',152),
  ('lista_sentencias -> <empty>','lista_sentencias',0,'p_lista_sentencias','rules.py',153),
  ('expresion -> expresion_aritmetica','expresion',1,'p_expresion','rules.py',163),
  ('expresion -> expresion_logica','expresion',1,'p_expresion','rules.py',164),
  ('expresion -> expresion_identificador','expresion',1,'p_expresion','rules.py',165),
  ('expresion -> expresion_literal','expresion',1,'p_expresion','rules.py',166),
  ('expresion -> expresion_comparacion','expresion',1,'p_expresion','rules.py',167),
  ('expresion_aritmetica -> expresion PLUS expresion','expresion_aritmetica',3,'p_expresion_aritmetica','rules.py',171),
  ('expresion_aritmetica -> expresion MINUS expresion','expresion_aritmetica',3,'p_expresion_aritmetica','rules.py',172),
  ('expresion_aritmetica -> expresion MULT expresion','expresion_aritmetica',3,'p_expresion_aritmetica','rules.py',173),
  ('expresion_aritmetica -> expresion DIV expresion','expresion_aritmetica',3,'p_expresion_aritmetica','rules.py',174),
  ('expresion_logica -> expresion AND expresion','expresion_logica',3,'p_expresion_logica','rules.py',178),
  ('expresion_logica -> expresion OR expresion','expresion_logica',3,'p_expresion_logica','rules.py',179),
  ('expresion_identificador -> IDENTIFIER','expresion_identificador',1,'p_expresion_identificador','rules.py',183),
  ('expresion_literal -> NUMBER','expresion_literal',1,'p_expresion_literal','rules.py',187),
  ('expresion_literal -> STRING_LITERAL','expresion_literal',1,'p_expresion_literal','rules.py',188),
  ('expresion_literal -> CHARACTER_LITERAL','expresion_literal',1,'p_expresion_literal','rules.py',189),
  ('expresion_literal -> BOOLEAN_LITERAL','expresion_literal',1,'p_expresion_literal','rules.py',190),
  ('expresion_literal -> NULL_LITERAL','expresion_literal',1,'p_expresion_literal','rules.py',191),
  ('expresion_comparacion -> expresion LT expresion','expresion_comparacion',3,'p_expresion_comparacion','rules.py',195),
  ('expresion_comparacion -> expresion LTE expresion','expresion_comparacion',3,'p_expresion_comparacion','rules.py',196),
  ('expresion_comparacion -> expresion GT expresion','expresion_comparacion',3,'p_expresion_comparacion','rules.py',197),
  ('expresion_comparacion -> expresion GTE expresion','expresion_comparacion',3,'p_expresion_comparacion','rules.py',198),
  ('expresion_comparacion -> expresion EQ expresion','expresion_comparacion',3,'p_expresion_comparacion','rules.py',199),
  ('expresion_comparacion -> expresion NEQ expresion','expresion_comparacion',3,'p_expresion_comparacion','rules.py',200),
  ('sentencia -> declaracion_variable','sentencia',1,'p_sentencia_declaracion_variable','rules.py',204),
  ('sentencia -> IDENTIFIER EQUALS expresion SEMICOLON','sentencia',4,'p_asignacion','rules.py',209),
  ('sentencia -> IF LPAREN expresion RPAREN bloque','sentencia',5,'p_sentencia_if','rules.py',215),
  ('sentencia -> IF LPAREN expresion RPAREN bloque ELSE bloque','sentencia',7,'p_sentencia_if','rules.py',216),
  ('sentencia -> FOR LPAREN tipo IDENTIFIER EQUALS expresion SEMICOLON expresion SEMICOLON expresion RPAREN bloque','sentencia',12,'p_sentencia_for','rules.py',224),
  ('sentencia -> WHILE LPAREN expresion RPAREN bloque','sentencia',5,'p_sentencia_while','rules.py',232),
]
